/* 
свойство display: flex; включает поведение флекс-контейнера у элемента, а его непосредственные потомки становятся флекс-элементами.
Можно также использовать display: inline-flex; - поведение будет как при inline-block, но элемент автоматически займет 100% ширины. Применяется не часто.
В отличии от других способов отображений flex влияет не на сам элемент, а на его потомков.

Оси
Элементы располагаются вдоль основной оси (main axis), которая проходит от main start до main end. Перпендикулярно ей проходит cross axis и идет от cross start до cross end
По умолчанию main axis - горизонтальная ось, а cross axis - вертикальная.
*/

:root {
    box-sizing: border-box;
}

*,
::before,
::after {
    box-sizing: inherit;
}

body {
    background-color: #709d90;
}

body * + * {
    margin-top: 1.5em;
}

.container {
    max-width: 1080px;
    margin: 0 auto;
}

/* Flex-box part */

/* Top menu */

.site-nav {
    display: flex;
    background-color: #5f4b44;
    list-style-type: none;
    padding: .5em;
    border-radius: .2em;
}

.site-nav > li {
    margin-top: 0;
}

.site-nav > li > a {
    display: block;
    text-decoration: none;
    color: white;
    background-color: #cc6b5a;
    padding: 0.5em 1em;
}

.site-nav > li + li {
    margin-left: 1.5em;
}

.site-nav .nav-right {
    margin-left: auto;
}

/* main block */

.tile {
    padding: 1.5em;
    background-color: #ffffff;
}

.flex {
    display: flex;
}

.flex > * + * {
    margin-top: 0;
    margin-left: 1.5em;
}

/* 
>>>
свойство flex содержит три свойства:
    flex-grow -- default auto (зависит от контента)
    flex-shrink -- default 1
    flex-basis -- default 0%
можно записать так: flex: 2 (flex-grow - 2, flex-shrink и flex-basis значения по умолчанию)
или так: flex: 2 1 0% // две записи эквивалентны

>>>flex-basis -- на этом свойстве базируются flex-grow и flex-shrink. Данное свойство задает основной размер элемента. Значения могут быть те же что и для width (px, em, $)
Когда flex-basis задан елементу может понадобиться расти или сжиматься, чтобы заполнить или поместиться в контейнер. Это определяется значениями flex-shrink и flex-grow

>>>flex-grow -- не может быть отрицательным. Если flex-grow - 0 - это значит, что он не сможет вырасти больше чем указано в flex-basis. В противном случае элемент будет растягиваться занимая все оставшееся пространство своего контейнера.
Если flex-basis: 0%, а flex-grow: 1 - это будет означать, что ширина блока 0%, оставшееся пространство - 100% за исключением отступов и блок растянется на всю оставшуюся ширину.
Если же два блока имеют одинаково значение flex-basis:0%, а значение flex-grow у них 1 и 2, то их ширины будут относится друг к другу как 2/3 к 1/3

Лучше пользоваться сокращением -- flex: 2, чем задавать свойства по отдельности. так как при втором подходе дефолтные значения не устанавливаются и вероятность ошибки возрастает.

>>>flex-shrink - следует тем же правилам, что и flex-grow. Если после установления базового размера контейнер будет занимать больше места чем есть в родителе, то он выйдет за его пределы. flex-shrink говорит о том, может ли контейнем быть сжат.
Значения:
    flex-shrink: 0 -- контейнер не может быть сжат
    любые другие значения говорят о том, что контейнер будет сжиматься до тех пор, пока не выйдет за пределы родителя.
Эффект двух колонок с соотношением размеров 1/3 к 2/3 с помощью flex-shrink может быть достигнут так: flex-shrink: 66.67% и flex-shrink: 33.33% -- эквивалентно 1 1 66.67% и 1 1 33.33%

>>>Варианты использования:
    -- flex: none | flex: none | flex: none -- создаст три колонки, ширина которых будет зависеть от контента, при этом они не обязательно заполнят ширину родительского контейнера
    -- flex: 0 0 300px | flex: 1 -- первый контейнер будет равен ширине 300px или меньше (max-width), второй - займет все оставшееся пространство
    -- flex: 0 0 200px | flex: 1 | flex: 0 0 200px -- два крайних контейнера будут равны макисмальной ширине 200px, а второй, центральный - займет всю оставшуюся ширину
    -- flex: 50% | flex: 25% | flex: 25% -- левый контейнер займет половину всей ширины, два других займут четвертую часть каждый

>>>Flex-direction
flex-direction - применяется ко всему контейнеру. Изначальное значение row - заставляет дочерние элементы располагаться в "линию" слева-направо. Значение может быть изменено вот так -- direction: column -- и приведет к тому, что элементы расположатся вертикально друг-под-другом. Также доступны опции row-reverse и column-reverse, чтобы расположить элементы справа-налево и снизу-вверх соответственно.
Если элменты распололжены в колонку, то значения flex - basis, grow и shrink применяются к высоте, а не к ширине.
*/

.column-main {
    flex: 2;
}

/* Переворачивает основную ось в сайдбаре, располагая элементы вертикально и задает значение flex-grow - 1, остальные по умолчанию. Это заставляет элементы занимать свободное пространство контейнера */
.column-sidebar {
    display: flex;
    flex-direction: column;
    flex: 1;
}

.column-sidebar > .tile {
    flex: 1;
}

/* Стилизация login формы */
.login-form h3{
    margin: 0;
    font-size: .9em;
    font-weight: bold;
    text-align: right;
    text-transform: uppercase;
}

.login-form input:not([type=checkbox]):not([type=radio]) {
    display: block;
    width: 100%;
    margin-top: 0;
}

.login-form button {
    margin-top: 1em;
    border: 1px solid #cc6b5a;
    background-color: #ffffff;
    padding: .5em 1em;
    cursor: pointer;
}