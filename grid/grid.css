.grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    grid-gap: .5em;
}

.grid > * {
    background-color: darkgray;
    color: white;
    padding: 2em;
    border-radius: .5em;
}

/* 
display: grid; - ведет себя как блочный элемент, занимает 100% ширины
display: inline-grid; - grid-layout со строчным поведением, будет занимать ширину согласно контента
grid-template-columns - указывает количество колонок в шаблоне
grid-template-rows - указывает количество строк в шаблоне
fr - fraction unit - единица измерения наиболее подходящая для grid-layout, указывает какую часть свободного места будет занимать ячейка
grid-gap - указывает промежуток между ячейками
Понятия:
    * grid line - создает структуру сетки. Может быть вертикальной или горизонтальной. grid-gap лежит поверх grid line
    * grid track - это пространство между двумя смежными grid line. Сетка имеет горизонтальные трэки (строки) и вертикальные трэки (колонки)
    * grid cell - единичное пространство в сетке, где пересекаются горизонтальный и вертикальный трэки
    * grid area - прямоугольное пространство, состоящее из одной или более ячеек сетки

Функция repeat(x, s) - повторяет колонки или строки x-раз, устанавливая им размер s. Это эквивалентно grid-template-rows: auto, auto, auto, auto; Размер auto зависит от контента. Выражение может быть и более сложным: repeat(3, 1fr 2fr) --> 1fr 2fr 1fr 2fr 1fr 2fr, или таким: 1fr repeat(3, 3fr) 1fr --> 1fr 3fr 3fr 3fr 1fr

Чтобы указать где именно должен быть расположен каждый элемент сетки можно использовать т.н. grid numbers. Для колонок эти значения могу быть следующими: grid-column: 1 / 3, что означает колонка начинается с 1-й колонки сетки и заканчивается на 3-й (но не захыватывает ее, то есть заканчивается до 3-й колонки). Для строк код может выглядеть так: grid-row: 3 / 5, grid-row-start - 3 и grid-row-end - 5, т.е. строка начинается с 3-й строки сетки и заканчивается сразу перед 5-ой строкой сетки.

Ключевое слово span говорит о том, что строка или столбец (grid track) n-ное количество строк или столбцов без указания конкретной позиции. Размещаются они согласно логике placement algorithm. PA располагает элементы так, чтобы заполнить первое свободное место в сетке

Для разметки элементов сетки существует два альтернативных синтаксиса: grid lines и grid area.
grid lines наиболее подходит когда в разметке очень много линий. В этом случае можно использовать имена линий вместо их порядковых номеров. Синтаксис: grid-template-columns: [start] 2fr [center] 1fr [end]; Тут обявляется 2-х колоночная сетка с 3-мя вертикальными линиями названными start, center и end. Далее на имена можно ссылаться: grid-column: start / center
? После названия следует размер.
Имен может быть и больше [left-end right-start] 1fr - далее можно будет ссылаться на любое из них
start и and - ключевые слова. Имя не включающее в себя эти ключевые слова будет подразумевать их.
naming grid areas - именование областей сетки. В свойстве grid-template-areas указываются области по количеству строк и столбцов. Например:
grid-template-areas: "title  title"
                    "nav    nav"
                    "main   aside1"
                    "main   aside2";
grid-area - всегда образует прямоугольник
grid-template-areas: "top top right"
                    "left . right"
                    "left bottom bottom"; - такая разметка оставляет пустое местов середине

Неявная сетка - используется в тех случаях когда количество строк и столбцов заранее не известны (например приходят с сервера). При использвании grid-template-row|column - используется явная сетка
Неявная сетка чаще всего имеет размер auto
Чтобы все трэки сетки могли подстраиваться под размеры контента используются свойства:
    - grid-auto-columns
    - grid-auto-rows
Функция minmax() помогает указать размер в заданных диапазонах. Например minmax(200px, 1fr) говорит о том, что размер ячейки должен быть не меньше 200px, но и не больше 1 части сетки. Если же максимальный размер меньше минимального, то максимум игнорируется.
Ключевое  слово auto-fill - используется в функции repeat() и говорит от том, что нужно положить как можно больше грид-айтемов на трек. Чтобы не породить проблем лучше использовать в связке с функцией minmax()
В случае когда пустые треки не нужны вместо auto-fill следует использовать ключевое слово auto-fit
Для управления алгоритмом распределения можно использовать свойство grid-auto-flow. Если начальным значение указать row, то алгоритм будет работать также. Если же указать column, то заполнение будет происходить по-колоночно, как только строка будет заполнена колонками, произойдет переход на следующую строку.
Ключевое слово dense позволяет добиться лучшего заполнения, так как возможно изменение порядка элементов. Пример: grid-auto-flow: column dense;

Проверить доступен ли display: grid; в браузере можно, выполнив feature query: @supports (display: grid) {...}
Возможны следующие варинаты использования:
    @supports not(<declaration>) - правила будут применены только в случае если проверяемое правило не поддерживается
    @supports (<declaration>) or (<declaration>) - правила будут применены если хотябы одна из деклараций поддерживается
    @supports (<declaration>) and (<declaration>) - правила будут применены только если обе декларации поддерживаются

Выравнивание в сетке. Три основные свойства для распределения: justify-content, justify-items, justify-self. Эти свойства отвечают за горизонтальное расположение
Три основные свойства для выравнивания: align-content, align-items, align-self. Эти свойства отвечают за вертикальное расположение
Выравниваение по горизонтали и вертикали грид-контейнера относительно grid areas:
    justify-items
    align-items
Выравнивание элемента сетки относительно области сетки:
    justify-content
    align-content
Выравнивание грид-контейнера относительно трэков внутри контейнера
Доступные значения для свойств: start, end, center, stretch, space-between, space-around, space-evenly
*/

:root {
    box-sizing: border-box;
}

*, ::before, ::after {
    box-sizing: inherit;
}

body {
    background-color: #709d90;
    font-family: Helvetica, Arial, sans-serif;
}

.container {
    display: grid;
    /* grid-template-columns: 2fr 1fr;
    grid-template-rows: repeat(4, auto); */
    /* grid-lines */
    /* grid-template-columns:  [left-start] 2fr
                            [left-end right-start] 1fr
                            [right-end];
    grid-template-rows: repeat(4, [row] auto); */
    /* grid-areas */
    grid-template-areas: "title  title"
                         "nav    nav"
                         "main   aside1"
                         "main   aside2";
    grid-template-columns: 2fr 1fr;
    grid-template-rows: repeat(4, auto);
    grid-gap: 1.5em;
    max-width: 1080px;
    margin: 0 auto;
}

.page-heading {
    margin: 0;
}

/* header, nav { */
    /* grid-column: 1 / 3; */
    /* grid-lines */
    /* grid-column: left-start / right-end;
    grid-row: span 1;
} */

/* grid-areas starts*/
header {
    grid-area: title;
}

nav {
    grid-area: nav;
}


/* grid-areas ends*/

.site-nav {
    display: block;
    padding: .5em;
    margin: 0;
    background-color: #5f4b44;
    list-style-type: none;
    border-radius: .2em;
}

.site-nav > li {
    margin-top: 0;
}

.site-nav > li > a {
    display: block;
    padding: 0.5em 1em;
    background-color: #cc6b5a;
    color: white;
    text-decoration: none;
}

.site-nav > li + li {
    margin-left: 1.5em;
}

.site-nav .nav-right {
    margin-left: auto;
}

.main {
    /* grid-column: 1 / 2;
    grid-row: 3 / 5; */
    /* grid-lines */
    /* grid-column: left;
    grid-row: row 3 / span 2; */
    /* grid-areas */
    grid-area: main;
}

.login-form h3 {
    margin: 0;
    font-size: 0.9em;
    font-weight: bold;
    text-align: right;
    text-transform: uppercase;
}

.login-form input:not([type="checkbox"]):not([type="radio"]) {
    display: block;
    margin-top: 0;
    width: 100%;
}

.login-form button {
    margin-top: 1em;
    border: 1px solid #cc6b5a;
    background-color: white;
    padding: .5em 1em;
    cursor: pointer;
}

.sidebar-top {
    /* grid-column: 2 / 3; */
    /* grid-lines */
    /* grid-column: right;
    grid-row: 3 / 4; */
    /* grid-area */
    grid-area: aside1;
}

.sidebar-bottom {
    /* grid-column: 2 / 3; */
    /* grid-lines */
    /* grid-column: right;
    grid-row: 4 / 5; */
    /* grid-area */
    grid-area: aside2;
}

.tile {
    padding: 1.5em;
    background-color: #fff;
}

.tile > :first-child {
    margin-top: 0;
}

.tile * + * {
    margin-top: 1.5em
}

.centered {
    text-align: center;
}

.cost {
    display: flex;
    justify-content: center;
    align-items: center;
    line-height: .7;
}

.cost > span {
    margin-top: 0;
}

.cost-currency {
    font-size: 2rem;
}

.cost-dollars {
    font-size: 4rem;
}

.cost-cents {
    font-size: 1.5rem;
    align-self: flex-start;
}

.cta-button {
    display: block;
    background-color: #cc6d5a;
    color: white;
    padding: 0.5em 1em;
    text-decoration: none;
}

/* implicit grid */

.portfolio figure {
    display: inline-block;
    max-width: 300px;
    margin: 0;
}

.portfolio img {
    max-width: 100%;
    object-fit: cover;
}

.portfolio figcaption {
    padding: 0.3em .8em;
    background-color: rgba(0, 0, 0, 0.5);
    color: #ffffff;
    text-align: right;
}

@supports(display: grid) {
    .portfolio {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        grid-auto-rows: 1fr;
        grid-gap: 1em;
        grid-auto-flow: dense;
    }
    
    .portfolio .featured {
        grid-row: span 2;
        grid-column: span 2;
    }

    .portfolio .featured img {
        max-height: 100%;
    }
    
    .portfolio > figure {
        display: flex;
        flex-direction: column;
        max-width: initial;
    }
    
    .portfolio img {
        flex: 1;
        max-height: 200px;
    }
}